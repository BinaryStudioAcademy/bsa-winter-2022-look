module.exports = {
  root: true,
  env: {
    node: true,
  },
  extends: [
    'plugin:vue/vue3-essential',
    '@vue/standard',
    '@vue/typescript/recommended',
  ],
  parserOptions: {
    ecmaVersion: 2020,
  },
  plugins: ['vue'],
  rules: {
    indent: ['error', 2],
    'vue/order-in-components': [
      'error',
      {
        order: [
          'el',
          'name',
          'key',
          'parent',
          'functional',
          ['delimiters', 'comments'],
          ['components', 'directives', 'filters'],
          'extends',
          'mixins',
          ['provide', 'inject'],
          'ROUTER_GUARDS',
          'layout',
          'asyncData',
          'middleware',
          'storeManagerMiddleware',
          'dataFetchMiddleware',
          'validate',
          'scrollToTop',
          'transition',
          'loading',
          'inheritAttrs',
          'model',
          ['props', 'propsData'],
          'emits',
          'setup',
          'data',
          'fetch',
          'head',
          'computed',
          'watch',
          'watchQuery',
          'LIFECYCLE_HOOKS',
          'methods',
          ['template', 'render'],
          'renderError',
        ],
      },
    ],
    'vue/attributes-order': ['error'],
    'vue/singleline-html-element-content-newline': ['off'],
    'vue/html-indent': [
      'error',
      2,
      {
        attribute: 1,
        closeBracket: 0,
        alignAttributesVertically: true,
        ignores: [],
      },
    ],
    'vue/html-self-closing': [
      'error',
      {
        html: {
          void: 'any',
          normal: 'any',
          component: 'always',
        },
        svg: 'any',
        math: 'any',
      },
    ],
    'vue/max-attributes-per-line': [
      2,
      {
        singleline: 4,
        multiline: {
          max: 1,
          allowFirstLine: false,
        },
      },
    ],
    'vue/attribute-hyphenation': ['error', 'always'],
    'keyword-spacing': ['error'],
    'space-before-function-paren': [
      'error',
      { anonymous: 'always', named: 'never', asyncArrow: 'always' },
    ],
    'arrow-spacing': ['error'],
    'vue/multiline-html-element-content-newline': ['off'],
    'vue/html-closing-bracket-spacing': ['error'],
    'semi-style': ['error', 'last'],
    semi: ['error', 'always'],
    'space-before-blocks': ['error', 'always'],
    'vue/custom-event-name-casing': ['error', 'kebab-case'],
    'vue/v-on-event-hyphenation': [
      'error',
      'always',
      {
        ignore: ['cardTokenChanged', 'validationFailed'],
      },
    ],
    'vue/v-slot-style': ['error'],
    'vue/no-deprecated-slot-scope-attribute': ['error'],
    'eol-last': ['error', 'always'],
    'vue/no-empty-component-block': ['error'],
    'vue/no-static-inline-styles': ['error'],
    'vue/no-useless-v-bind': ['error'],
    'vue/v-on-function-call': ['error'],
    'no-unused-vars': [
      'error',
      {
        vars: 'all',
        args: 'after-used',
        ignoreRestSiblings: true,
      },
    ],
    complexity: ['error', 15],
    eqeqeq: ['error', 'always'],
    'no-var': ['error'],
    'consistent-return': ['error'],
    'no-useless-return': ['error'],
    'no-multi-spaces': ['error'],
    quotes: [
      'error',
      'single',
      {
        avoidEscape: true,
      },
    ],
    'no-duplicate-imports': ['error'],
    'prefer-const': ['error'],
    'comma-dangle': ['error', 'always-multiline'],
  },
  overrides: [
    {
      files: ['*.ts'],
      parser: '@typescript-eslint/parser',
      parserOptions: {
        project: './tsconfig.json',
      },
      extends: ['plugin:@typescript-eslint/recommended'],
      plugins: ['@typescript-eslint'],
      rules: {
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': [
          'error',
          {
            vars: 'all',
            args: 'after-used',
            ignoreRestSiblings: true,
          },
        ],
        '@typescript-eslint/no-inferrable-types': [
          'error',
          {
            ignoreParameters: true,
            ignoreProperties: true,
          },
        ],
        '@typescript-eslint/no-explicit-any': 'off',
        semi: 'off',
        '@typescript-eslint/semi': ['error'],
        '@typescript-eslint/ban-types': [
          'error',
          {
            extendDefaults: true,
            types: {
              Function: false,
            },
          },
        ],
        '@typescript-eslint/explicit-module-boundary-types': [
          'error',
          {
            allowArgumentsExplicitlyTypedAsAny: true,
          },
        ],
        '@typescript-eslint/prefer-reduce-type-parameter': ['error'],
        indent: ['error', 2],
        '@typescript-eslint/indent': ['error', 2],
      },
    },
  ],
};
